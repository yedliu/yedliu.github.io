<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[初识Angular2]]></title>
      <url>%2F2017%2F04%2F11%2F%E5%88%9D%E8%AF%86Angular2%2F</url>
      <content type="text"><![CDATA[Angular控制器的几种创建方式 1.全局函数法,此方法只适用于angular1.2.29以前的版本，这里只是了解一下，如果有一些老的项目，可能还是会遇到。 1234567 &lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myCtrl&quot;&gt; &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt; &lt;/div&gt;var app = angular.module(&apos;myApp&apos;,[]); function myCtrl($scope)&#123; $scope.name = &apos;yedliu&apos;; &#125; 2.面向对象法：把回调函数当做构造函数来使用 12345678 &lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myCtrl as obj&quot;&gt; &lt;p&gt;&#123;&#123;obj.name&#125;&#125;&lt;/p&gt; &lt;/div&gt;var app = angular.module(&apos;myApp&apos;,[]); app.controller(&apos;myCtrl&apos;,function($scop)&#123; //此处参数$scope可以不写，因为这里是通过this来赋值的 this.name = &apos;yedliu&apos;; &#125;) 3.传统方法：这种方法用的也不多，因为存在安全问题 1234567 &lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myCtrl&quot;&gt; &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt; &lt;/div&gt;var app = angular.module(&apos;myApp&apos;,[]); app.controller(&apos;myCtrl&apos;,function($scope)&#123; $scope.name = &apos;yedliu&apos;; &#125;) 4.安全方式：由于后期项目在上线的时候都会将代码进行压缩，而传统方法代码压缩后会将参数$scope变为简单的字符而导致出错,由于字符串在进行压缩时，不会改变。所以将参数以字符串的形式放在数组中。这种方式在工作中会经常用到 1234567 &lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myCtrl&quot;&gt; &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt; &lt;/div&gt;var app = angular.module(&apos;myApp&apos;,[]); app.controller(&apos;myCtrl&apos;,[&apos;$scope&apos;,function($scope)&#123; $scope.name = &apos;yedliu&apos;; &#125;]) 依赖注入原理 依赖(Dependency)：如果要创建一个司机对象(new Driver())，就必须首先提供一个Car对象！没有Car对象就不能创建出Driver对象！——称Driver依赖于Car，或者Car对象是Driver的依赖对象！ AngularJS采用模块化的方式组织代码，将一些通用逻辑封装成一个对象或函数，实现最大程度的复用，这导致了使用者和被使用者之间存在依赖关系。所谓依赖注入是指在运行时自动查找依赖关系，然后将查找到依赖传递给使用者的一种机制。核心是toString()常见的AngularJS内置服务有$http、$location、$timeout、$rootScope等其实声明依赖方式，也就是上述的安全方式。12345678app.controller(&apos;myCtrl&apos;,[&apos;$scope&apos;,&apos;$http&apos;,function($scope,$http)&#123; //发起ajax请求 $http(&#123; method:&apos;post&apos;, url:&apos;example.php&apos;, data:&#123;&#125; &#125;) &#125;]) ng-bind、ng-cloak指令解决闪烁问题 由于我们在引入angular.js是在html标签后引入的一开始并没有加载到文件，js代码是从上到下依次执行，所在刷新时会看到我们在代码中写的表达式等，然后瞬间将值渲染出来，肉眼是可以观察到的，解决这种问题可以用2个指令： ng-bind：只能在双标签中用&lt;p ng-bind=&quot;数据模型&quot;&gt;&lt;/p&gt; ng-cloak:利用angular在加载会移除页面上所以名为ng-cloak的样式名的特性。这里我们需要手动在样式表里添加类123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .ng-cloak &#123; display: none; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body ng-app=&quot;myApp&quot;&gt; &lt;div ng-controller=&quot;myCtrl&quot;&gt; &lt;p class=&quot;ng-cloak&quot;&gt;&#123;&#123;name&#125;&#125;:&#123;&#123;age&#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;script src=&quot;./node_modules/angular/angular.js&quot;&gt;&lt;/script&gt; &lt;script&gt; var app = angular.module(&apos;myApp&apos;, []); app.controller(&apos;myCtrl&apos;, [&apos;$scope&apos;, function($scope) &#123; $scope.name = &apos;mm&apos;; $scope.age = 20; &#125;]) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Angular指令 ng-repeat: 可以用来循环输出数组 写在哪个元素上就是循环哪个元素。 语法：类似于forin 循环 &lt;div ng-repeat=&quot;item in data &quot;&gt;&lt;/div&gt; track by $index 解决数组中数据有重得的问题 &lt;li ng-repeat=&quot;item in tesData track by $index&quot;&gt;&lt;/li&gt; 还可以用来渲染key,value对 ng-repeat 在遍历里会暴露一些数据模型, $even:提供了一个布尔值，当为true时表示当前数据是第偶数条数据,从索引0开始计算 $odd:提供了一个布尔值，当为true时表示当前数据是第奇数条数据,从索引0开始计算 $first,$last ,$middle ng-class: 从多种样式中选择一个样式- 语法：类似于从一个key,value对象中获取其中一个属性的值 - ng-class=&quot;{&apos;A&apos;:&apos;red&apos;,&apos;B&apos;:&apos;blue&apos;,&apos;C&apos;:&apos;green&apos;}&quot; 从多种样式中选择多个 语法：也是写一个key,value对象，这里的key是我们提供的类样式名，value是一个布尔值，为true时对应的key会被作为样式名加入到class中 ng-hide/ng-show: ng-hide：需要一个布尔值：当为true时为隐藏当前元素 ng-show: 需要一个布尔值：当为true时为显示当前元素 ng-if:需要一个布尔值：当为true时为显示当前元素,为false时是删除当前元素 ng-switch:与ng-switch-when同用，类似与js中的switch case12345&lt;div ng-switch=&quot;name&quot;&gt; &lt;div ng-switch-when=&quot;小明&quot;&gt;我是小明&lt;/div&gt; &lt;div ng-switch-when=&quot;小红&quot;&gt;我是小红&lt;/div&gt; &lt;div ng-switch-when=&quot;小月&quot;&gt;我是小月&lt;/div&gt;&lt;/div&gt; angular中的事件对象$event1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myCtrl&quot;&gt; &lt;input type=&quot;text&quot; ng-keyup=&quot;add($event)&quot;&gt; &lt;/div&gt; &lt;script src=&quot;node_modules/angular/angular.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var app = angular.module(&apos;myApp&apos;, []); app.controller(&apos;myCtrl&apos;, [&apos;$scope&apos;, function($scope) &#123; $scope.add = function(e) &#123; console.log(e); if (e.keyCode === 13) console.log(&apos;按下回车&apos;); &#125; &#125;]) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 其他常用指令 ng-checked： 单选/复选是否选中,是单向数据绑定 ng-selected： 是否选中 ng-disabled： 是否禁用 ng-readonly： 是否只读常用事件指令不同于以上的功能性指令，Angular还定义了一些用于和事件绑定的指令： ng-blur：失去焦点 ng-focus：获得焦点 ng-change：改变事件 ng-copy：复制事件 ng-click： ng-click=”add()” ng-dblclick：双击事件 ng-submit： 表单提交事件todoMVC的雏形 针对以上的知识点，写一个小demo，类似于todoMVC12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .line &#123; text-decoration: line-through; color: #ccc; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myCtrl&quot;&gt; &lt;ul&gt; &lt;li ng-repeat=&quot;k in data&quot;&gt; &lt;label&gt; &lt;input type=&quot;checkbox&quot; name=&quot;&quot; ng-model=&quot;k.isChecked&quot;&gt;&lt;span ng-class=&quot;&#123;&apos;line&apos;:k.isChecked&#125;&quot;&gt;&#123;&#123;k.text&#125;&#125;&lt;/span&gt; &lt;/label&gt; &lt;/li&gt; &lt;/ul&gt; &lt;input type=&quot;text&quot; placeholder=&quot;add to do here&quot; ng-model=&quot;val&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;add&quot; ng-click=&quot;add()&quot;&gt; &lt;/div&gt; &lt;script src=&quot;node_modules/angular/angular.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var app = angular.module(&apos;myApp&apos;, []); app.controller(&apos;myCtrl&apos;, [&apos;$scope&apos;, function($scope) &#123; $scope.data = [&#123; text: &apos;吃饭&apos;, isChecked: true &#125;, &#123; text: &apos;睡觉&apos;, isChecked: false &#125;]; $scope.val = &apos;&apos;; $scope.add = function() &#123; if ($scope.val) &#123; $scope.data.push(&#123; text: $scope.val, isChecked: false &#125;); $scope.val = &apos;&apos;; &#125; &#125; &#125;]) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[初识Angular]]></title>
      <url>%2F2017%2F04%2F09%2F%E5%88%9D%E8%AF%86Angular1%2F</url>
      <content type="text"><![CDATA[Angular的特点 AngularJS是一款由Google公司开发维护的前端MVC框架，其克服了HTML在构建应用上的诸多不足，从而降低了开发成本提升了开发效率。 一个功能非常完备的前端框架，通过增强HTML的方式提供一种便捷开发Web应用程序的方式 —&gt; 指令 其核心特点就是几乎无任何DOM操作，让开发人员的精力和时间全部集中于业务 使用一种基于MVC或者MVVM(双向数据绑定)的思想 依赖注入 一切都是模块,可以轻松构建 SPA 应用程序Augular的安装 这里主要说几个主流的安装方式：1.npm安装(需要安装node.js) 1npm install angular@1.5.6 --save 表示安装的是1.5.6版本的2.暴力安装：就是直接从我们的本地烤一个angular.js文件3.bower 不推荐，速度太慢4.cdn安装，网上有第三方的cdn服务器，这样不需要在我们的代码中引入angula.js文件，有利于SEO，具体方法可以百度一下，这里不再多说。本人推荐npm方式安装，因为npm在其他方面用到的也很多，几乎是前段必备。 Angular的一些简单指令 ng-app:限定Angular.js管理的地盘有多大,下面这行代码表示angular从这个div开始管理其中的代码 123&lt;div ng-app&gt;...&lt;/div&gt; ng-click:给元素注册点击事件 1234&lt;input type=&quot;text&quot; ng-model=&quot;a&quot;&gt;&lt;/input&gt;+&lt;input type=&quot;text&quot; ng-model=&quot;b&quot;&gt;&lt;/input&gt;&lt;input type=&quot;button&quot; ng-click=&quot;val=(a-0)+(b-0)&quot;&gt;&lt;/input&gt;&lt;input type=&quot;text&quot; ng-model=&quot;val&quot;&gt;&lt;/input&gt; 上面代码表示点击按钮button后计算出前2个文本框的值相加，结果在第四个文本框中显示，代码中的减0，表示隐式转换 ng-model:指定一个元素的值，就像上面代码中的一样Angular表达式 1&lt;p&gt;&#123;&#123;hello&#125;&#125;&lt;/p&gt; 也叫插值表达式，含义：angular会计算表达式的值，输出在当前位置（专业术语叫绑定） 从上面几个指令可以看出我们把在angular为我们提供的以ng-开头的叫做指令，指令就是用来命令指挥做什么事件的东西ng-app 用来启动一个angular应用，限定angular的范围，管理ng-app所在的元素及其子元素。 ng-init:初始化数据，用法 1&lt;span ng-init=&quot;a=1&quot;&gt;&lt;/span&gt; 下面就简单实现一个加法计算器的例子： 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;//ng-app 表示从body开始管理代码&lt;body ng-app&gt; //通过指令ng-model获取input里面的值 &lt;input type=&quot;text&quot; name=&quot;&quot; value=&quot;&quot; ng-model=&quot;a&quot;&gt;+ &lt;input type=&quot;text&quot; name=&quot;&quot; value=&quot;&quot; ng-model=&quot;b&quot;&gt; //ng-click注册点事件 &lt;input type=&quot;button&quot; name=&quot;&quot; value=&quot;=&quot; ng-click=&quot;result=(a-0)+(b-0)&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;&quot; value=&quot;&quot; ng-model=&quot;result&quot;&gt; &lt;p&gt;&#123;&#123;(a-0)+(b-0)&#125;&#125;&lt;/p&gt;&lt;/body&gt;&lt;script src=&quot;./node_modules/angular/angular.js&quot;&gt;&lt;/script&gt;&lt;/html&gt; Angular的模块创建(module) var app = angular.module(‘myApp’,[]); 第一个参数是模块名，第二个参数是一个数组，数组里的元素是该模块所依赖的其他模块的模块名注意,即使不依赖任何模块，也需要给第二个参数传递一个空数组否则angular.module(‘myApp’)就是去获取名为myApp的模块对象 控制器(controller) app.controller(‘myController’,function($scope){})第一个参数表示控制器的名称，第二个是一个回调函数，在里面写我们的js代码双向数据绑定 数据模型的值发生改变，就会导致页面值的改变.页面值的改变，就会导致数据模型值的改变，这各种相互影响的关系就是双向数据绑定 ng-model单向数据绑定 使用表达式显示数据模型的值。MVC思想 M:Model 模型 :数据存储，一些业务逻辑 即项目中的业务数据，在ng中由变量担当 V:View 视图 ：就是用来展示数据 负责业务数据的呈现，在ng中HTML+指令 C:Controller 控制器: 调度业务逻辑 控制器，负责操作（增删改查）业务数据，在ng中由一种特殊的function来担当。我们的模型里存着当前的用户真正的数据，我们的控制器负责把我们的模型里面的数据让视图渲染出来，最终提供给我们的用户。Angular开发流程总结 ng-app -&gt; module -&gt;controller–&gt; model 安装angular 在html代码中引入angular.js文件 声明一个angularJs的应用程序：ng-app=”模块名”,限定angular的作用范围 创建一个自定义的模块：angular.module(“模块名”,[依赖列表])1、视图指的就是ng-app包裹的html片段，用来展示数据，真正的用户所能看到的东西、在view中指明controller对象的作用范围2、确定视图中哪些地方需要用到控制器，在模块中声明控制器controller 在控制器当中设置model模型数据$watch监视数据模型的变化-用于监视数据模型的变化（并且只能监视数据模型的变化） $scope.$watch(‘数据模型名的字符串形式’,function(变化后的值,变化前的值){}) $scope.$watch里的回调函数会默认执行一次。 监视用户输入的用户名，检测是否被占用监视购物车的内容变化，计算最新结果，只能监视当前$scope上的成员为应用中的模型设置初始状态通过$scope对象把数据模型或者函数行为暴露给视图监视模型的变化，做出相应的动作($watch) 具体看一段代码：12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body ng-app=&quot;myApp&quot; ng-controller=&quot;myController&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;&quot; ng-model=&quot;a&quot;&gt;+ &lt;input type=&quot;text&quot; ng-model=&quot;b&quot;&gt;= &lt;input type=&quot;text&quot; ng-model=&quot;c&quot;&gt; &lt;script src=&quot;./node_modules/angular/angular.js&quot;&gt;&lt;/script&gt; &lt;script&gt; var app = angular.module(&apos;myApp&apos;,[]); app.controller(&apos;myController&apos;,function($scope)&#123; $scope.a = &apos;&apos;; $scope.b = &apos;&apos;;//如果不给初始值且只输入一个值算出的结果是NAN $scope.$watch(&apos;a&apos;,function(newVal,oldVal)&#123; $scope.c = ($scope.a-0) + ($scope.b-0); &#125;); $scope.$watch(&apos;b&apos;,function(newVal,oldVal)&#123; $scope.c = ($scope.a-0) + ($scope.b-0); &#125;); &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 针对以上的一些知识，做一个综合性例子，模拟用户注册12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body ng-app=&quot;myApp&quot; ng-controller=&quot;myController&quot;&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt;用户名:&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; ng-model=&quot;username&quot; value=&quot;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;密码:&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; ng-model=&quot;password&quot; value=&quot;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;确认密码:&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; ng-model=&quot;confrim&quot; value=&quot;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;是否同意:&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;checkbox&quot; ng-model=&quot;isAgree&quot; value=&quot;&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt;&lt;td&gt;&#123;&#123;msg&#125;&#125;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;button&quot; ng-click=&quot;register()&quot; value=&quot;注册&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p&gt;&#123;&#123;ok&#125;&#125;&lt;/p&gt; &lt;script src=&quot;./node_modules/angular/angular.js&quot;&gt;&lt;/script&gt; &lt;script&gt; var app = angular.module(&apos;myApp&apos;,[]); app.controller(&apos;myController&apos;,function($scope)&#123; $scope.username = &apos;&apos;; $scope.password = &apos;&apos;; $scope.confrim = &apos;&apos;; $scope.isAgree = false; $scope.msg = &apos;&apos;; $scope.ok = &apos;&apos;; $scope.register = function()&#123; if($scope.username==&apos;&apos;)&#123; $scope.msg = &apos;请填写用户名&apos; return; &#125; if($scope.password == &apos;&apos; || $scope.password != $scope.confrim)&#123; $scope.msg = &apos;密码为空或密码不正确&apos;; return; &#125; if(!$scope.isAgree)&#123; $scope.msg = &apos;请点击同意&apos;; return; &#125; var user = new getUser($scope.username,$scope.password); var result =user.save(); if(result)&#123; $scope.ok = &apos;注册成功&apos;; &#125; &#125; &#125;); //创建一个构造函数 function getUser(username,password)&#123; this.username = username; this.password = password; &#125; //在构造函数的原型上添加一个save方法用来判断用户输入的用户名是否和数据库中的相同，如果相同就不能注册成功 //如果不同就可以注册成功 getUser.prototype.save = function()&#123; //由于没有后台数据，这里就用本地存储来模拟从后台拿到的数据 //获取本地存储的用户名 var data = localStorage.getItem(&apos;user&apos;) || &apos;[]&apos;;//如果本地用户名不存在则获得一个空数组 //users:[&#123;username:&apos;a&apos;,password:&apos;2&apos;&#125;,&#123;username:&apos;b&apos;,password:&apos;3&apos;&#125;]是一个json字符串，需要转换成对象 var users = JSON.parse(data); //遍历users里面的键值，如果用户名和传入的用户名相同就不能注册 for(var k in users)&#123; // var item = users[i]; // console.log(this); if(users[k].username == this.username)&#123; return false; &#125; &#125; //如果遍历后还没有相同的就把注册信息push到users中 users.push(&#123;username:this.username,password:this.password&#125;); //再把对象转换成字符串存储到loaclStroge localStorage.setItem(&apos;user&apos;,JSON.stringify(users)); return true; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 总结 以上知识本人在学习中的个人总结，其中不免有遗漏的知识和未接触的东西，在这里就分享一下，后面还会学习总结。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[npm的使用]]></title>
      <url>%2F2017%2F04%2F08%2Fnpm%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
      <content type="text"><![CDATA[npm的使用 命令 npm init 初始化 会生成一个package.json的文件 它里面有我们下载东西的版本记录 npm install –save jquery 下载安装jQuery，下载什么就写什么 npm remove –save jquery 删除安装的jQuery npm install –save 文件名 它会在当前文件夹创建一个node_modules的文件 是我们需要用到的 npm install –save -dev 也会下载到我们当前的文件夹的node_modules里面 –&gt; 作用是当前项目工具，用来把我们当前的代码做编译borwser-sync borwser-sync可以实现当代码发生变化是自动刷新浏览器 安装 npm install borwser-sync -g(-g表示安装到全局) 使用 borwser-sync start –server –files “文件名”gulp gulp 用来压缩js 、css、html、图片等 gulp的API+ task 任务，gulp把实现的一个功能叫任务 + src 指定要处理到的文件 + pipe 管道 用来连接每个方法 + dest 指定处理后文件的输出路径 + watch 监视文件 gulp的安装+ 使用npm进行安装 npm install gulp-cli -gulp gulp的使用* 使用时还需要在项目中通过npm非全局安装gulp * npm install gulp --save-dev * 创建gulpfile.js文件 gulp 的一些插件也用npm进行安装* gulp-uglify 对js代码进压缩 * gulp-cssnano 对css代码进行压缩 * gulp-htmlmin 对html代码进行压缩 * gulp-concat 对代码进行合并 安装方法：npm install --save-dev gulp-concat 其他的和这个一样 具体详情见官网gulp官网 具体代码演示12345678910111213141516171819202122232425262728var gulp = require(&apos;gulp&apos;);//得到gulp对象var uglify = require(&apos;gulp-uglify)//压缩js代码的方法var cssnano = require(&apos;gulp-cssnano&apos;)//压缩css代码的方法var htmlmin = require(&apos;gulp-htmlmin)//压缩html代码var concat = require(&apos;gulp-concat) //合并代码//压缩js代码gulp.task(&apos;js&apos;,function()&#123;//参数js表示进行的任务名 gulp.src([&apos;1.js&apos;,&apos;2.js&apos;])//多个参数用数组 .pipe(concat(&apos;all.js&apos;))//合并到指定的文件，文件名自己命名 .pipe(uglify()) .pipe(gulp.dest(&apos;./dist&apos;))//放到指定的文件下，这个自己命名 &#125;);//压缩css代码gulp.task(&apos;css&apos;,function()&#123; gulp.src([&apos;1.css&apos;,&apos;2.css&apos;]) .pipe(concat(&apos;all.css&apos;)) .pipe(cssnano()) .pipe(gulp.dest(&apos;./dist&apos;)) &#125;);//压缩html代码gulp.task(&apos;html&apos;,function()&#123; gulp.src(&apos;1.html&apos;) .pipe(htmlmin(&#123; &apos;collapseWhitespace&apos;: true, &apos;minifyJS&apos;: true, &apos;minifyCSS&apos;: true &#125;))//里面的参数可以去[gulp官网](https://github.com/gulpjs/gulp/blob/master/docs/API.md)查看 .pipe(gulp.dest(&apos;./dist&apos;)) &#125;);//监视各个文件gulp.watch([&apos;1.js&apos;,&apos;2.js&apos;,&apos;1.css&apos;,&apos;2.css&apos;,&apos;1.html&apos;],[&apos;js&apos;,&apos;css&apos;,&apos;html&apos;]);可以监视多个文件,用数组来存放 最后在dos中用(gulp 任务名)编译后可以实现压缩 npm install 名字 –save —&gt; 项目中真的会用得上的库/框架npm install 名字 –save-dev –&gt; 用来下载一些压缩、优化我们当前项目代码的前端工具 –save-devnpm install 名字 -g –&gt; 安装一些前端工具 browser-sync,webpacknpm install -g browser-syncnpm docs gulp 打开网页browser-sync start –server –files “.“ 同步预览文件样式]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[本地存储localstorage]]></title>
      <url>%2F2017%2F04%2F08%2F%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8localstorage%2F</url>
      <content type="text"><![CDATA[本地存储localstorage localstorage 是 HTML5 提供的在客户端存储数据的新方法，主要作用是将数据保存在客户端中，并且数据是永久保存的，除非人为干预删除。 localstorage作为本地存储来使用，解决了cookie存储空间不足的问题：cookie中每条cookie的存储空间为4k，但localStorage的存储空间有5M大小。另外，相比于cookie，localStorage可以节约带宽，在同一个域内，浏览器每次向服务器发送请求，http都会带着cookie，使cookie在浏览器和服务器之间来回传递，浪费带宽，但localStorage将第一次请求的数据直接存储到本地，避免了来回传递。localstorage 的局限 只有版本较高的浏览器中才支持 localstorage localStorage的值的类型限定为string类型，使用 JSON 时需转换 如果存储内容过多会消耗内存空间，导致页面变卡，因为localStorage本质上是对字符串的读取 localstorage 有两种方法：分别是 localstorage 和 sessionStorage 。sessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。localStorage与sessionStorage的唯一区别就是localStorage属于永久性存储，而sessionStorage在当会话结束的时候，sessionStorage中的键值对会被清空。localstorage的用法 我们在使用localStorage的时候，需要先判断浏览器是否支持localStorage这个属性： 123456if(window.localStorage)&#123; alert(&quot;浏览器支持localStorage&quot;); &#125;else&#123; alert(&quot;浏览器支持localStorage&quot;); &#125; ​ 接下来分别是它的写入、读取、删除 1234567891011121314151617//localStorage的写入var storage=window.localStorage; storage[&quot;a&quot;]=1; //写入a字段 storage.b=2; //写入b字段 storage.setItem(&quot;c&quot;,3); //写入c字段 console.log(typeof storage[&quot;a&quot;]); //string console.log(typeof storage[&quot;b&quot;]); //string console.log(typeof storage[&quot;c&quot;]); ​//string //localStorage的读取var a=storage.a; console.log(a); //1var b=storage[&quot;b&quot;]; console.log(b); //2var c=storage.getItem(&quot;c&quot;); console.log(c); ​ //3//localStorage的删除storage.clear(); //将localStorage的所有内容清除 使用key()方法，获取相应的键 1234567var storage=window.localStorage; storage.a=1; storage.setItem(&quot;c&quot;,3); for(var i=0;i&lt;storage.length;i++)&#123; var key = storage.key(i); console.log(key); //a c &#125; ​ 对用户访问页面的次数进行计数: 123456if(localStorage.pagecount)&#123; localStorage.pagecount = Number(localStorage.pagecount)+1; &#125;else&#123; localStorage.pagecount = 1; &#125; document.write(&quot;你第&quot;+localStorage.pagecount+&quot;访问该页面&quot;); ​ sessionStorage的用法和localStorage一样用法和localStorage一样，但是关闭计数页面后再打开时会重新开始计数。]]></content>
    </entry>

    
  
  
</search>
