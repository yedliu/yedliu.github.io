<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[npm的使用]]></title>
      <url>%2F2017%2F04%2F08%2Fnpm%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
      <content type="text"><![CDATA[npm的使用 命令 npm init 初始化 会生成一个package.json的文件 它里面有我们下载东西的版本记录 npm install –save jquery 下载安装jQuery，下载什么就写什么 npm remove –save jquery 删除安装的jQuery npm install –save 文件名 它会在当前文件夹创建一个node_modules的文件 是我们需要用到的 npm install –save -dev 也会下载到我们当前的文件夹的node_modules里面 –&gt; 作用是当前项目工具，用来把我们当前的代码做编译borwser-sync borwser-sync可以实现当代码发生变化是自动刷新浏览器 安装 npm install borwser-sync -g(-g表示安装到全局) 使用 borwser-sync start –server –files “文件名”gulp gulp 用来压缩js 、css、html、图片等 gulp的API+ task 任务，gulp把实现的一个功能叫任务 + src 指定要处理到的文件 + pipe 管道 用来连接每个方法 + dest 指定处理后文件的输出路径 + watch 监视文件 gulp的安装+ 使用npm进行安装 npm install gulp-cli -gulp gulp的使用* 使用时还需要在项目中通过npm非全局安装gulp * npm install gulp --save-dev * 创建gulpfile.js文件 gulp 的一些插件也用npm进行安装* gulp-uglify 对js代码进压缩 * gulp-cssnano 对css代码进行压缩 * gulp-htmlmin 对html代码进行压缩 * gulp-concat 对代码进行合并 安装方法：npm install --save-dev gulp-concat 其他的和这个一样 具体详情见官网gulp官网 具体代码演示12345678910111213141516171819202122232425262728var gulp = require(&apos;gulp&apos;);//得到gulp对象var uglify = require(&apos;gulp-uglify)//压缩js代码的方法var cssnano = require(&apos;gulp-cssnano&apos;)//压缩css代码的方法var htmlmin = require(&apos;gulp-htmlmin)//压缩html代码var concat = require(&apos;gulp-concat) //合并代码//压缩js代码gulp.task(&apos;js&apos;,function()&#123;//参数js表示进行的任务名 gulp.src([&apos;1.js&apos;,&apos;2.js&apos;])//多个参数用数组 .pipe(concat(&apos;all.js&apos;))//合并到指定的文件，文件名自己命名 .pipe(uglify()) .pipe(gulp.dest(&apos;./dist&apos;))//放到指定的文件下，这个自己命名 &#125;);//压缩css代码gulp.task(&apos;css&apos;,function()&#123; gulp.src([&apos;1.css&apos;,&apos;2.css&apos;]) .pipe(concat(&apos;all.css&apos;)) .pipe(cssnano()) .pipe(gulp.dest(&apos;./dist&apos;)) &#125;);//压缩html代码gulp.task(&apos;html&apos;,function()&#123; gulp.src(&apos;1.html&apos;) .pipe(htmlmin(&#123; &apos;collapseWhitespace&apos;: true, &apos;minifyJS&apos;: true, &apos;minifyCSS&apos;: true &#125;))//里面的参数可以去[gulp官网](https://github.com/gulpjs/gulp/blob/master/docs/API.md)查看 .pipe(gulp.dest(&apos;./dist&apos;)) &#125;);//监视各个文件gulp.watch([&apos;1.js&apos;,&apos;2.js&apos;,&apos;1.css&apos;,&apos;2.css&apos;,&apos;1.html&apos;],[&apos;js&apos;,&apos;css&apos;,&apos;html&apos;]);可以监视多个文件,用数组来存放 最后在dos中用(gulp 任务名)编译后可以实现压缩]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[本地存储localstorage]]></title>
      <url>%2F2017%2F04%2F08%2F%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8localstorage%2F</url>
      <content type="text"><![CDATA[本地存储localstorage localstorage 是 HTML5 提供的在客户端存储数据的新方法，主要作用是将数据保存在客户端中，并且数据是永久保存的，除非人为干预删除。 localstorage作为本地存储来使用，解决了cookie存储空间不足的问题：cookie中每条cookie的存储空间为4k，但localStorage的存储空间有5M大小。另外，相比于cookie，localStorage可以节约带宽，在同一个域内，浏览器每次向服务器发送请求，http都会带着cookie，使cookie在浏览器和服务器之间来回传递，浪费带宽，但localStorage将第一次请求的数据直接存储到本地，避免了来回传递。localstorage 的局限 只有版本较高的浏览器中才支持 localstorage localStorage的值的类型限定为string类型，使用 JSON 时需转换 如果存储内容过多会消耗内存空间，导致页面变卡，因为localStorage本质上是对字符串的读取 localstorage 有两种方法：分别是 localstorage 和 sessionStorage 。sessionStorage 方法针对一个 session 进行数据存储。当用户关闭浏览器窗口后，数据会被删除。localStorage与sessionStorage的唯一区别就是localStorage属于永久性存储，而sessionStorage在当会话结束的时候，sessionStorage中的键值对会被清空。localstorage的用法 我们在使用localStorage的时候，需要先判断浏览器是否支持localStorage这个属性： 123456if(window.localStorage)&#123; alert(&quot;浏览器支持localStorage&quot;); &#125;else&#123; alert(&quot;浏览器支持localStorage&quot;); &#125; ​ 接下来分别是它的写入、读取、删除 1234567891011121314151617//localStorage的写入var storage=window.localStorage; storage[&quot;a&quot;]=1; //写入a字段 storage.b=2; //写入b字段 storage.setItem(&quot;c&quot;,3); //写入c字段 console.log(typeof storage[&quot;a&quot;]); //string console.log(typeof storage[&quot;b&quot;]); //string console.log(typeof storage[&quot;c&quot;]); ​//string //localStorage的读取var a=storage.a; console.log(a); //1var b=storage[&quot;b&quot;]; console.log(b); //2var c=storage.getItem(&quot;c&quot;); console.log(c); ​ //3//localStorage的删除storage.clear(); //将localStorage的所有内容清除 使用key()方法，获取相应的键 1234567var storage=window.localStorage; storage.a=1; storage.setItem(&quot;c&quot;,3); for(var i=0;i&lt;storage.length;i++)&#123; var key = storage.key(i); console.log(key); //a c &#125; ​ 对用户访问页面的次数进行计数: 123456if(localStorage.pagecount)&#123; localStorage.pagecount = Number(localStorage.pagecount)+1; &#125;else&#123; localStorage.pagecount = 1; &#125; document.write(&quot;你第&quot;+localStorage.pagecount+&quot;访问该页面&quot;); ​ sessionStorage的用法和localStorage一样用法和localStorage一样，但是关闭计数页面后再打开时会重新开始计数。]]></content>
    </entry>

    
  
  
</search>
